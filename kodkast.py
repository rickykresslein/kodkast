# Title: Kodkast
# Author: Ricky Kresslein
# Author URL: https://kressle.in
# Project URL: https://kressle.in/projects/kodkast/
# Version: 0.8.9

import sys
import time
import vlc
import urllib.request
import os
import ssl
import peewee
import base64
import itunes
import requests
import certifi
import validators
from bs4 import BeautifulSoup
from models import PodcastDB, EpisodeDB
from datetime import date, datetime, timedelta
from PyQt5 import QtWidgets as qtw
from PyQt5 import QtGui as qtg
from PyQt5 import QtCore as qtc

# Logo in base64
image_base64 = b""


# Class gratefully provided by MegasXLR on Python-forum.io
# https://python-forum.io/Thread-PyQt-QSlider-jump-to-mouse-click-position
class QJumpSlider(qtw.QSlider):
    def __init__(self, parent=None):
        super(QJumpSlider, self).__init__(parent)
     
    def mousePressEvent(self, event):
        # Jump to click position
        mw.set_position(qtw.QStyle.sliderValueFromPosition(self.minimum(), self.maximum(), event.x(), self.width()))
        self.setValue(qtw.QStyle.sliderValueFromPosition(self.minimum(), self.maximum(), event.x(), self.width()))
     
    def mouseMoveEvent(self, event):
        # Jump to pointer position while moving
        mw.set_position(qtw.QStyle.sliderValueFromPosition(self.minimum(), self.maximum(), event.x(), self.width()))
        self.setValue(qtw.QStyle.sliderValueFromPosition(self.minimum(), self.maximum(), event.x(), self.width()))


class QClickLabel(qtw.QLabel):
    clicked = qtc.pyqtSignal()

    def mousePressEvent(self, event):
        self.clicked.emit()
        qtw.QLabel.mousePressEvent(self, event)


# Class gratefully provided by eyllanesc on Stack Overflow and modified by me
# https://stackoverflow.com/questions/46505130/creating-a-marquee-effect-in-pyside
class QMarqueeLabel(qtw.QLabel):
    def __init__(self, parent=None):
        qtw.QLabel.__init__(self, parent)
        self.px = 0
        self.py = 15
        self._direction = qtc.Qt.LeftToRight
        self.setWordWrap(True)
        self.timer = qtc.QTimer(self)
        self.timer.timeout.connect(self.update)
        self.timer.start(30)
        self._speed = 2
        self.textLength = 0
        self.fontPointSize = 0
        self.setAlignment(qtc.Qt.AlignVCenter)
        self.setFixedHeight(self.fontMetrics().height())

    def setFont(self, font):
        qtw.QLabel.setFont(self, font)
        self.setFixedHeight(self.fontMetrics().height())

    def updateCoordinates(self):
        align = self.alignment()
        if align == qtc.Qt.AlignTop:
            self.py = 10
        elif align == qtc.Qt.AlignBottom:
            self.py = self.height() - 10
        elif align == qtc.Qt.AlignVCenter:
            self.py = self.height() / 2
        self.fontPointSize = self.font().pointSize() / 2
        self.textLength = self.fontMetrics().horizontalAdvance(self.text())

    def setAlignment(self, alignment):
        self.updateCoordinates()
        qtw.QLabel.setAlignment(self, alignment)

    def resizeEvent(self, event):
        self.updateCoordinates()
        qtw.QLabel.resizeEvent(self, event)

    def paintEvent(self, event):
        painter = qtg.QPainter(self)
        if self._direction == qtc.Qt.RightToLeft:
            self.px -= self.speed()
            if self.px <= -self.textLength:
                self.px = self.width()
        else:
            self.px += self.speed()
            if self.px >= self.width():
                self.px = -self.textLength
        painter.drawText(self.px, round(self.py + self.fontPointSize), self.text())
        painter.translate(self.px, 0)

    def speed(self):
        return self._speed

    def setSpeed(self, speed):
        self._speed = speed

    def setDirection(self, direction):
        self._direction = direction
        if self._direction == qtc.Qt.RightToLeft:
            self.px = 300
        else:
            self.px = 0
        self.update()

    def pause(self):
        self.timer.stop()

    def unpause(self):
        self.timer.start()


class MainWindow(qtw.QMainWindow):

    def __init__(self):
        """MainWindow Constructor"""
        super().__init__()
        
        self.setWindowTitle('Kodkast')
        icon = self.icon_from_base64(image_base64)
        self.setWindowIcon(icon)
        self.resize(355, 700)
        self.setFixedWidth(355)
        self.start_width_resize = self.width() - 5

        self.headers = {'User-Agent':'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.11 (KHTML, like Gecko) Chrome/23.0.1271.64 Safari/537.11',}
        self.track = None
        self.player = None
        self.is_paused = False
        self.ptt_to_prt = False
        self.playback_speed_val = 1
        self.podcasts_old = []
        self.currently_top_100 = False
        self.timer = qtc.QTimer(self)
        self.timer.setInterval(500)
        self.timer.timeout.connect(self.update_ui)
        self.old_image = ""
        self.already_saved = -1
        
        self.set_vlc_dir()

        self.initiate_database()

        self.build_menu_bar()
        self.build_library_view()

        self.show()

    @staticmethod
    def set_vlc_dir():
        """
        Set the directory of VLC Plugins for the OS and warn user
        if it is not installed.
        """
        # Ignore unverified URL errors
        ssl._create_default_https_context = ssl._create_unverified_context

        # VLC not installed warning dialog
        vlc_not_installed = qtw.QMessageBox()
        vlc_not_installed.setIcon(qtw.QMessageBox.Warning)
        vlc_not_installed.setText("VLC is not installed on your computer. Kodkast requires VLC.")
        vlc_not_installed.setInformativeText("You can download VLC from https://www.videolan.org/vlc/")
        vlc_not_installed.setWindowTitle("VLC Not Found")

        # Find and set the VLC_PLUGIN_PATH directory
        if sys.platform == "linux" or sys.platform == "linux2":
            # linux
            if os.path.isdir("/usr/lib64/vlc/plugins"):
                os.environ["VLC_PLUGIN_PATH"] = "/usr/lib64/vlc/plugins"
            elif os.path.isdir("/usr/lib/x86_64-linux-gnu/vlc/plugins"):
                os.environ["VLC_PLUGIN_PATH"] = "/usr/lib/x86_64-linux-gnu/vlc/plugins"
            elif os.path.isdir("/usr/lib/vlc/plugins"):
                os.environ["VLC_PLUGIN_PATH"] = "/usr/lib/vlc/plugins"
            elif os.path.isdir("/usr/lib32/vlc/plugins"):
                os.environ["VLC_PLUGIN_PATH"] = "/usr/lib32/vlc/plugins"
            else:
                # VLC is not installed
                vlc_not_installed.exec_()
        elif sys.platform == "darwin":
            # mac
            if os.path.isdir("/Applications/VLC.app/Contents/MacOS/plugins"):
                os.environ["VLC_PLUGIN_PATH"] = "/Applications/VLC.app/Contents/MacOS/plugins"
            else:
                # VLC not installed
                vlc_not_installed.exec_()

    @staticmethod
    def initiate_database():
        try:
            PodcastDB.create_table()
        except peewee.OperationalError:
            pass
        
        try:
            EpisodeDB.create_table()
        except peewee.OperationalError:
            pass

    def build_menu_bar(self):
        menubar = self.menuBar()

        file_menu = menubar.addMenu("File")
        file_menu.addAction('Quit', qtw.QApplication.quit, qtg.QKeySequence.Quit)

        podcasts_menu = menubar.addMenu("Podcasts")
        self.add_podcast_action = podcasts_menu.addAction('Add a new podcast', self.build_add_podcast)
        self.add_podcast_action.setShortcut('Ctrl+A')
        self.remove_podcast_action = podcasts_menu.addAction('Remove podcast', lambda: self.remove_podcast(self.lib_podcasts.currentItem().text()))

        episodes_menu = menubar.addMenu("Episodes")
        self.refresh_episodes_action = episodes_menu.addAction('Refresh episode list', self.load_episodes_from_feed)
        self.refresh_episodes_action.setShortcut('Ctrl+R')
        self.refresh_episodes_action.setEnabled(False)

        self.play_shortcut = qtw.QShortcut(qtg.QKeySequence("Space"), self)
        self.play_shortcut.activated.connect(self.play_episode_shortcut)
        self.play_pause_key = qtw.QShortcut(qtg.QKeySequence(qtc.Qt.Key_MediaPlay), self)
        self.play_pause_key.activated.connect(self.play_episode_shortcut)

    def build_library_view(self):
        self.refresh_episodes_action.setEnabled(False)
        self.library_layout = qtw.QWidget()
        self.library_layout.setLayout(qtw.QVBoxLayout())
        self.resize(355, 700)

        lib_title = qtw.QLabel('Library')
        self.to_play_view_btn = qtw.QPushButton('➡', clicked=self.to_play_view)
        self.to_play_view_btn.setFixedWidth(50)
        self.lib_podcasts = qtw.QListWidget()
        self.lib_podcasts.setViewMode(qtw.QListView.IconMode)
        self.lib_podcasts.setIconSize(qtc.QSize(130,130))
        self.lib_podcasts.setMovement(False)
        self.lib_podcasts.setResizeMode(qtw.QListView.Adjust)
        self.lib_podcasts.setSpacing(11)
        self.lib_podcasts.setUniformItemSizes(True)
        self.lib_podcasts.doubleClicked.connect(lambda: self.build_episode_view(self.lib_podcasts.currentItem().text()))
        self.lib_podcasts.setContextMenuPolicy(qtc.Qt.CustomContextMenu)
        self.lib_podcasts.customContextMenuRequested.connect(self.library_context_menu)
        self.lib_add = qtw.QPushButton('Add Podcast', clicked=self.build_add_podcast)

        title_line = qtw.QWidget()
        title_line.setLayout(qtw.QHBoxLayout())
        title_line.layout().addWidget(lib_title, alignment=qtc.Qt.AlignLeft)
        if self.player and self.player.is_playing():
            title_line.layout().addWidget(self.to_play_view_btn, alignment=qtc.Qt.AlignRight)
        self.library_layout.layout().addWidget(title_line)
        self.library_layout.layout().addWidget(self.lib_podcasts)
        self.library_layout.layout().addWidget(self.lib_add)
        # Show mini player if podcast is already playing
        self.build_mini_player(self.library_layout)
        self.setCentralWidget(self.library_layout)
        self.add_podcast_action.setEnabled(True)
        self.remove_podcast_action.setEnabled(True)

        self.refresh_podcast_list()
    
    def refresh_podcast_list(self):
        query = PodcastDB.select()
        self.lib_podcasts.clear()
        for podcast in query:
            if not podcast.rendered:
                request=urllib.request.Request(podcast.image, None, self.headers)
                response = urllib.request.urlopen(request)
                url_image = response.read()
                b64_img = base64.b64encode(url_image)
                podcast.rendered = b64_img
                podcast.save()
            podcast_pmap = qtg.QPixmap()
            podcast_pmap.loadFromData(base64.b64decode(podcast.rendered))
            podcast_icon = qtg.QIcon(podcast_pmap)
            this_podcast = qtw.QListWidgetItem(podcast.title, self.lib_podcasts)
            this_podcast.setStatusTip(podcast.title)
            this_podcast.setIcon(podcast_icon)
            this_podcast.setSizeHint(qtc.QSize(140, 150))
            
    def build_add_podcast(self):
        qtw.QApplication.setOverrideCursor(qtc.Qt.WaitCursor)
        self.currently_top_100 = False
        self.refresh_episodes_action.setEnabled(False)
        self.add_podcast_action.setEnabled(False)
        self.remove_podcast_action.setEnabled(False)
        
        self.add_podcast_layout = qtw.QWidget()
        self.add_podcast_layout.setLayout(qtw.QVBoxLayout())

        back_to_pod_list = qtw.QPushButton("⬅", clicked=self.build_library_view)
        back_to_pod_list.setFixedWidth(50)
        search_itunes_title = qtw.QLabel('Search iTunes:')
        search_box = qtw.QLineEdit()
        search_button = qtw.QPushButton('Search', clicked=lambda: self.search_itunes(search_box.text()))
        search_button.setFixedWidth(100)
        search_box.returnPressed.connect(search_button.click)
        add_by_url_title = qtw.QLabel('Add by URL:')
        url_box = qtw.QLineEdit()
        add_by_url_button = qtw.QPushButton('Add', clicked=lambda: self.add_podcast_to_library(url_box.text(),url_add=True))
        add_by_url_button.setFixedWidth(100)
        url_box.returnPressed.connect(add_by_url_button.click)
        top_100_button = qtw.QPushButton('iTunes Top 100', clicked=self.show_top_100)
        self.results_list = qtw.QListWidget()
        self.results_list.setViewMode(qtw.QListView.IconMode)
        self.results_list.setIconSize(qtc.QSize(130,130))
        self.results_list.setMovement(False)
        self.results_list.setResizeMode(qtw.QListView.Adjust)
        self.results_list.setSpacing(11)
        self.results_list.setUniformItemSizes(True)
        self.results_list.doubleClicked.connect(lambda: self.add_podcast_to_library(
                                                 self.results_lod[self.results_list.currentRow()]
                                                ))
        self.results_list.setContextMenuPolicy(qtc.Qt.CustomContextMenu)
        self.results_list.customContextMenuRequested.connect(self.search_context_menu)
        subscribe_button = qtw.QPushButton('Subscribe', clicked=lambda: self.add_podcast_to_library(
                                                            self.results_lod[self.results_list.currentRow()]
                                                        ))
        
        search_line_layout = qtw.QWidget()
        search_line_layout.setLayout(qtw.QHBoxLayout())
        search_line_layout.layout().addWidget(search_box)
        search_line_layout.layout().addWidget(search_button)
        
        url_line_layout = qtw.QWidget()
        url_line_layout.setLayout(qtw.QHBoxLayout())
        url_line_layout.layout().addWidget(url_box)
        url_line_layout.layout().addWidget(add_by_url_button)
        
        self.add_podcast_layout.layout().addWidget(back_to_pod_list)
        self.add_podcast_layout.layout().addWidget(add_by_url_title)
        self.add_podcast_layout.layout().addWidget(url_line_layout)
        self.add_podcast_layout.layout().addWidget(search_itunes_title)
        self.add_podcast_layout.layout().addWidget(search_line_layout)
        self.add_podcast_layout.layout().addWidget(top_100_button)
        self.add_podcast_layout.layout().addWidget(self.results_list)
        self.add_podcast_layout.layout().addWidget(subscribe_button)
        # Show mini player if podcast is already playing
        self.build_mini_player(self.add_podcast_layout)
        self.setCentralWidget(self.add_podcast_layout)
        
        search_box.setFocus()

        qtw.QApplication.restoreOverrideCursor()
        
    def search_itunes(self, search_query):
        qtw.QApplication.setOverrideCursor(qtc.Qt.WaitCursor)
        self.currently_top_100 = False
        self.results_list.clear()
        self.results_lod = []
        result_limit = 0
        results = itunes.search(query=search_query, media='podcast')
        for result in results:
            if result_limit < 50:
                # Only show results that have the necessary keys
                if result.json.keys() >= {"artworkUrl600", "feedUrl"}:
                    # Get title, picture, and url for each podcast that has them
                    result_dict = {'title': result.name, 'image': result.artwork['600'], 'url': result.json['feedUrl']}
                    # Store all this data in a variable (list of dicts) in order to recal the feed url
                    self.results_lod.append(result_dict)
                    
                    # Display title and picture
                    request = urllib.request.Request(result_dict['image'], None, self.headers)
                    response = urllib.request.urlopen(request)
                    url_image = response.read()
                    podcast_pmap = qtg.QPixmap()
                    podcast_pmap.loadFromData(url_image)
                    podcast_icon = qtg.QIcon(podcast_pmap)
                    this_podcast = qtw.QListWidgetItem(result_dict['title'], self.results_list)
                    this_podcast.setStatusTip(result_dict['title'])
                    this_podcast.setIcon(podcast_icon)
                    this_podcast.setSizeHint(qtc.QSize(140, 150))
                    result_limit += 1
            else:
                break
        qtw.QApplication.restoreOverrideCursor()
        
    def add_podcast_to_library(self, ap_selection, url_add=False):
        qtw.QApplication.setOverrideCursor(qtc.Qt.WaitCursor)
        if not url_add:
            if self.currently_top_100:
                ap = itunes.lookup(int(ap_selection['id']))
                if ap.json.keys() >= {"feedUrl"}:
                    ap_url = ap.json['feedUrl']
                else:
                    qtw.QApplication.restoreOverrideCursor()
                    self.invalid_url_warning()
                    return
            else:
                ap_url = ap_selection['url']
        else:
            ap_url = ap_selection

        if validators.url(ap_url):
            feed_req = requests.get(ap_url)
            try:
                feed = BeautifulSoup(feed_req.content, features='xml')
                feed_title = feed.find('title').text
                if url_add:
                    try:
                        feed_image = feed.find('image')['href']
                    except KeyError:
                        feed_image = feed.find('image').find('url').text
                else:
                    try:
                        feed_image = feed.find('image').find('url').text
                    except:
                        feed_image = feed.find('image')['href']
                query = PodcastDB.select().where(PodcastDB.title == feed_title)
                if query.exists():
                    qtw.QApplication.restoreOverrideCursor()
                    exists_msg = qtw.QMessageBox()
                    exists_msg.setIcon(qtw.QMessageBox.Information)
                    exists_msg.setWindowTitle("Already Exists")
                    exists_msg.setText("You are already subscribed to that podcast.")
                    exists_msg.exec_()
                else:
                    PodcastDB.create(title=feed_title, url=ap_url, image=feed_image)
                    qtw.QApplication.restoreOverrideCursor()
                self.build_library_view()
            except AttributeError:
                qtw.QApplication.restoreOverrideCursor()
                self.invalid_url_warning()
        else:
            # VLC not installed warning dialog
            qtw.QApplication.restoreOverrideCursor()
            self.invalid_url_warning()
        
        
    def invalid_url_warning(self):
        invalid_url = qtw.QMessageBox()
        invalid_url.setIcon(qtw.QMessageBox.Critical)
        invalid_url.setText("The URL you entered is invalid.")
        invalid_url.setInformativeText("Please enter a valid Podcast RSS feed URL")
        invalid_url.setWindowTitle("Invalid URL")
        invalid_url.exec_()
        
    def show_top_100(self):
        qtw.QApplication.setOverrideCursor(qtc.Qt.WaitCursor)
        self.currently_top_100 = True
        self.results_list.clear()
        self.results_lod = []
        results = requests.get('https://rss.itunes.apple.com/api/v1/us/podcasts/top-podcasts/all/100/explicit.json', verify=certifi.where()).json()
        results = results['feed']['results']
        for result in results:
            # Only show results that have the necessary keys
            if result.keys() >= {"artworkUrl100", "url"}:
                # Get title, picture, and url for each podcast that has them
                result_dict = {'title': result['name'], 'image': result['artworkUrl100'], 'id': result['id']}
                # Store all this data in a variable (list of dicts) in order to recal the feed url
                self.results_lod.append(result_dict)
                
                # Display title and picture
                request=urllib.request.Request(result_dict['image'], None, self.headers)
                response = urllib.request.urlopen(request)
                url_image = response.read()
                podcast_pmap = qtg.QPixmap()
                podcast_pmap.loadFromData(url_image)
                podcast_icon = qtg.QIcon(podcast_pmap)
                this_podcast = qtw.QListWidgetItem(result_dict['title'], self.results_list)
                this_podcast.setStatusTip(result_dict['title'])
                this_podcast.setIcon(podcast_icon)
                this_podcast.setSizeHint(qtc.QSize(140, 150))
        qtw.QApplication.restoreOverrideCursor()

    def remove_podcast(self, current_podcast):
        qtw.QApplication.setOverrideCursor(qtc.Qt.WaitCursor)
        current_podcast = PodcastDB.select().where(PodcastDB.title==current_podcast).get()
        current_podcast.delete_instance()
        query = EpisodeDB.select().where(EpisodeDB.podcast == current_podcast)
        if query.exists():
            for episode in query:
                episode.delete_instance()
        self.refresh_podcast_list()
        qtw.QApplication.restoreOverrideCursor()

    def build_episode_view(self, current_podcast):
        self.current_podcast = PodcastDB.select().where(PodcastDB.title==current_podcast).get()
        self.add_podcast_action.setEnabled(False)
        self.remove_podcast_action.setEnabled(False)
        episode_layout = qtw.QWidget()
        episode_layout.setLayout(qtw.QVBoxLayout())
        self.resize(355, 700)

        back_to_pod_list = qtw.QPushButton("⬅", clicked=self.build_library_view)
        back_to_pod_list.setFixedWidth(50)
        self.to_play_view_btn = qtw.QPushButton('➡', clicked=self.to_play_view)
        self.to_play_view_btn.setFixedWidth(50)
        bak_fwd_layout = qtw.QWidget()
        bak_fwd_layout.setLayout(qtw.QHBoxLayout())
        bak_fwd_layout.layout().addWidget(back_to_pod_list, alignment=qtc.Qt.AlignLeft)
        if self.player and self.player.is_playing():
            bak_fwd_layout.layout().addWidget(self.to_play_view_btn, alignment=qtc.Qt.AlignRight)

        title_label = qtw.QLabel(self.current_podcast.title)
        self.ep_list = qtw.QTableWidget()
        self.ep_list.setColumnCount(2)
        self.ep_list.setHorizontalHeaderLabels(['Date', 'Title'])
        self.ep_list.horizontalHeaderItem(0).setTextAlignment(qtc.Qt.AlignLeft)
        self.ep_list.horizontalHeaderItem(1).setTextAlignment(qtc.Qt.AlignLeft)
        self.ep_list.setSelectionBehavior(qtw.QAbstractItemView.SelectRows)
        self.ep_list.verticalHeader().setVisible(False)
        self.ep_list.setSelectionMode(qtw.QAbstractItemView.SingleSelection)
        self.ep_list.setAutoScroll(False)
        self.ep_list.setShowGrid(False)
        self.ep_list.doubleClicked.connect(lambda: self.build_play_view(self.ep_list.item(self.ep_list.currentRow(),1).text()))
        self.ep_list.setContextMenuPolicy(qtc.Qt.CustomContextMenu)
        self.ep_list.customContextMenuRequested.connect(self.episode_context_menu)
        self.ep_list_play = qtw.QPushButton("Play", clicked=lambda: self.build_play_view(self.ep_list.item(self.ep_list.currentRow(),1).text()))

        episode_layout.layout().addWidget(bak_fwd_layout)
        episode_layout.layout().addWidget(title_label)
        episode_layout.layout().addWidget(self.ep_list)
        episode_layout.layout().addWidget(self.ep_list_play)
        self.build_mini_player(episode_layout)
        self.setCentralWidget(episode_layout)
        
        query = EpisodeDB.select().where(EpisodeDB.podcast == self.current_podcast)
        if query.exists():
            # If podcast episode lists exists, load it.
            self.refresh_episode_list()
            # If latest episode is older than 6 days, check for new episodes
            latest_text = self.ep_list.item(0,0).text()
            if latest_text != "Today" and latest_text != "Yesterday":
                newest_episode = datetime.strptime(latest_text, "%m-%d-%Y")
                time_since_newest = datetime.now() - newest_episode
                if time_since_newest.days > 6:
                    self.load_episodes_from_feed()
        else:
            # Otherwise, build a new list from the feed.
            self.load_episodes_from_feed()
        self.refresh_episodes_action.setEnabled(True)        

    def load_episodes_from_feed(self):
        qtw.QApplication.setOverrideCursor(qtc.Qt.WaitCursor)
        show_error = False
        query = EpisodeDB.select().where(EpisodeDB.podcast == self.current_podcast)

        feed_req = requests.get(self.current_podcast.url)
        feed = BeautifulSoup(feed_req.content, features='xml')
        items = feed.find_all('item')

        for episode in items:
            is_new_episode = True
            episode_title = episode.title.text
            episode_url = episode.enclosure['url']
            published_date = datetime.strptime(episode.pubDate.text, "%a, %d %b %Y %H:%M:%S %z")
            try:
                episode_image = feed.find('image').find('url').text
            except:
                try:
                    episode_image = feed.find('image')['href']
                except:
                    episode_image = None
            
            if query.exists():
                for old_episode in query:
                    if old_episode.title == episode_title and old_episode.url == episode_url:
                        is_new_episode = False
                    elif old_episode.title == episode_title and old_episode.url != episode_url:
                        old_episode.delete_instance()
            if is_new_episode:
                try:
                    if episode_image:
                        EpisodeDB.create(
                            podcast=PodcastDB.get(PodcastDB.title==self.current_podcast.title),
                            title=episode_title,
                            pub_date=published_date.date(),
                            url=episode_url,
                            image=episode_image,
                            bookmark=0,
                        )
                    else:
                        EpisodeDB.create(
                            podcast=PodcastDB.get(PodcastDB.title==self.current_podcast.title),
                            title=episode_title,
                            pub_date=published_date.date(),
                            url=episode_url,
                            image=self.current_podcast.image,
                            bookmark=0,
                        )
                    self.refresh_episode_list()
                except peewee.IntegrityError:
                    show_error = True
            
        if show_error:
            show_error = False
            vlc_not_installed = qtw.QMessageBox()
            vlc_not_installed.setIcon(qtw.QMessageBox.Warning)
            vlc_not_installed.setText("One or more episodes could not be loaded.")
            vlc_not_installed.setInformativeText("Sorry, we don't support video podcasts yet.")
            vlc_not_installed.setWindowTitle("Invalid Episodes")
                
        qtw.QApplication.restoreOverrideCursor()

    def refresh_episode_list(self):
        qtw.QApplication.setOverrideCursor(qtc.Qt.WaitCursor)
        query = EpisodeDB.select().where(EpisodeDB.podcast == self.current_podcast).order_by(EpisodeDB.pub_date.desc())
        self.ep_list.setRowCount(0)
        today = date.today()
        yesterday = today - timedelta(days=1)
        for episode in query:
            row_data = [episode.pub_date.strftime("%m-%d-%Y"), episode.title]
            row = self.ep_list.rowCount()
            self.ep_list.setRowCount(row+1)
            col = 0
            for item in row_data:
                if item == today.strftime("%m-%d-%Y"):
                    item = "Today"
                elif item == yesterday.strftime("%m-%d-%Y"):
                    item = "Yesterday"
                cell = qtw.QTableWidgetItem(item)
                self.ep_list.setItem(row, col, cell)
                col += 1
        self.ep_list.resizeColumnsToContents()
        qtw.QApplication.restoreOverrideCursor()

    def build_play_view(self, current_episode):
        qtw.QApplication.setOverrideCursor(qtc.Qt.WaitCursor)
        self.just_built_play_view = True
        self.add_podcast_action.setEnabled(False)
        self.remove_podcast_action.setEnabled(False)
        self.refresh_episodes_action.setEnabled(False)
        self.current_episode = EpisodeDB.select().where(EpisodeDB.title == current_episode).get()
        play_layout = qtw.QWidget()
        play_layout.setLayout(qtw.QVBoxLayout())

        back_to_ep_list = qtw.QPushButton("⬅", clicked=self.back_to_episode_list)
        back_to_ep_list.setFixedWidth(50)
        
        ep_image_display = qtw.QLabel()
        
        if self.old_image != self.current_episode.image:
            self.old_image = self.current_episode.image
            request = urllib.request.Request(self.current_episode.image, None, self.headers)
            response = urllib.request.urlopen(request)
            url_image = response.read()
            b64_img = base64.b64encode(url_image)
            current_episode_rendered = b64_img
            self.ep_image = qtg.QPixmap()
            self.ep_image.loadFromData(base64.b64decode(current_episode_rendered))
        ep_image_display.setPixmap(self.ep_image)
        ep_image_display.setScaledContents(True)
        ep_image_display.setFixedSize(300, 300)
        ep_image_display.move(0, 200)
        ep_image_display.setAlignment(qtc.Qt.AlignCenter)

        # Podcast title scroll or not
        self.podcast_title = qtw.QLabel()
        self.podcast_title.setText(self.current_podcast.title)
        text_width = self.podcast_title.fontMetrics().boundingRect(self.podcast_title.text()).width()
        if text_width > self.start_width_resize:
            self.podcast_title = QMarqueeLabel()
            self.podcast_title.setDirection(qtc.Qt.RightToLeft)
        self.podcast_title.setFixedWidth(self.start_width_resize)
        self.podcast_title.move(0, 100)
        self.podcast_title.setAlignment(qtc.Qt.AlignCenter)

        # Episode title scroll or not
        self.episode_title = qtw.QLabel()
        self.episode_title.setText(self.current_episode.title)
        self.ep_text_width = self.episode_title.fontMetrics().boundingRect(self.episode_title.text()).width()
        if self.ep_text_width > self.start_width_resize:
            self.episode_title = QMarqueeLabel()
            self.episode_title.setDirection(qtc.Qt.RightToLeft)
        self.episode_title.setFixedWidth(self.start_width_resize)
        self.episode_title.move(0, 100)
        self.episode_title.setAlignment(qtc.Qt.AlignCenter)

        self.position_elapsed_time = qtw.QLabel("00:00")
        self.position_slider = QJumpSlider(qtc.Qt.Horizontal)
        self.position_slider.setMaximum(1000)
        self.position_total_time = QClickLabel()
        self.position_total_time.clicked.connect(self.position_total_time_clicked)
        self.ep_play = qtw.QPushButton("►", clicked=self.play_episode)
        self.ep_play.setFixedHeight(45)
        ep_skip_back = qtw.QPushButton("⟲", clicked=self.skip_back)
        ep_skip_fwd = qtw.QPushButton("⟳", clicked=self.skip_forward)
        self.playback_speed_btn = qtw.QPushButton(f"{self.playback_speed_val}x", clicked=self.set_playback_speed)
        self.playback_speed_btn.setFixedWidth(50)

        controls_layout = qtw.QWidget()
        controls_layout.setLayout(qtw.QHBoxLayout())
        controls_layout.layout().addWidget(ep_skip_back)
        controls_layout.layout().addWidget(self.ep_play)
        controls_layout.layout().addWidget(ep_skip_fwd)

        position_layout = qtw.QWidget()
        position_layout.setLayout(qtw.QHBoxLayout())
        position_layout.layout().addWidget(self.position_elapsed_time)
        position_layout.layout().addWidget(self.position_slider)
        position_layout.layout().addWidget(self.position_total_time)

        play_layout.layout().addWidget(back_to_ep_list)
        play_layout.layout().addWidget(ep_image_display, alignment=qtc.Qt.AlignCenter)
        play_layout.layout().addWidget(self.podcast_title, alignment=qtc.Qt.AlignCenter)
        play_layout.layout().addWidget(self.episode_title, alignment=qtc.Qt.AlignCenter)
        play_layout.layout().addWidget(position_layout)
        play_layout.layout().addWidget(controls_layout)
        play_layout.layout().addWidget(self.playback_speed_btn)
        self.setCentralWidget(play_layout)
        self.resize(355, 600)
        
        self.play_view = True

        if self.track != self.current_episode.url:
            self.track = self.current_episode.url
            if self.player and self.player.is_playing():
                self.player.stop()
            self.player = vlc.MediaPlayer(self.track)
            self.podcast_title.setText(self.current_podcast.title)
            self.episode_title.setText(self.current_episode.title)
            self.is_paused = False
            self.play_episode()
            if self.current_episode.bookmark != 0:
                self.show_track_time_elapsed()
        else:
            if self.player and self.player.is_playing():
                self.timer.start()
                self.podcast_title.setText(self.current_podcast.title)
                self.episode_title.setText(self.current_episode.title)
                self.get_total_track_time()
                self.ep_play.setText("Ⅱ")
            elif self.player and not self.player.is_playing():
                if self.current_episode.bookmark != 0:
                    self.show_track_time_elapsed()
        qtw.QApplication.restoreOverrideCursor()

    def play_episode(self):
        if not self.player.is_playing():
            if self.is_paused:
                self.ep_play.setText("Ⅱ")
                self.player.pause()
                self.is_paused = False
            else:
                self.ep_play.setText("Ⅱ")
                self.player.play()
                while not self.player.is_playing():
                    time.sleep(0.5)
                if self.current_episode.bookmark != 0:
                    self.player.set_time(self.current_episode.bookmark)
                self.get_total_track_time()

            self.player.set_rate(self.playback_speed_val)
            self.timer.start()
        else:
            self.ep_play.setText("►")
            self.player.pause()
            self.is_paused = True
            self.timer.stop()

    def play_episode_shortcut(self):
        if self.player and self.ep_play:
            try:
                self.play_episode()
            except RuntimeError:
                pass

    def back_to_episode_list(self):
        self.play_view = False
        self.build_episode_view(self.current_podcast.title)
        
    def build_mini_player(self, which_layout):
        if self.player and self.player.is_playing():
            mini_player = qtw.QWidget()
            mini_player.setLayout(qtw.QHBoxLayout())
            second_col = qtw.QWidget()
            second_col.setLayout(qtw.QVBoxLayout())
            
            # Rebuild Track Title
            self.episode_title = qtw.QLabel()
            self.episode_title.setText(self.current_episode.title)
            self.ep_text_width = self.episode_title.fontMetrics().horizontalAdvance(self.episode_title.text())
            if self.ep_text_width > self.position_slider.frameGeometry().width():
                self.episode_title = QMarqueeLabel()
                self.episode_title.setDirection(qtc.Qt.RightToLeft)
                self.episode_title.setText(self.current_episode.title)
            self.episode_title.setAlignment(qtc.Qt.AlignCenter)
            
            second_col.layout().addWidget(self.episode_title)
            second_col.layout().addWidget(self.position_slider)
            
            mini_player.layout().addWidget(self.ep_play)
            mini_player.layout().addWidget(second_col)
            
            mini_player.setFixedHeight(75)
            
            # Add mini player to current widget
            which_layout.layout().addWidget(mini_player)
            
    def build_about_view(self, ap_selection):
        qtw.QApplication.setOverrideCursor(qtc.Qt.WaitCursor)
        self.add_podcast_action.setEnabled(False)
        self.remove_podcast_action.setEnabled(False)
        self.refresh_episodes_action.setEnabled(False)
        about_layout = qtw.QWidget()
        about_layout.setLayout(qtw.QVBoxLayout())

        back_to_search = qtw.QPushButton("⬅", clicked=self.build_add_podcast)
        back_to_search.setFixedWidth(50)
        
        podcast_image_display = qtw.QLabel()
        
        if self.currently_top_100:
            ap = itunes.lookup(int(ap_selection['id']))
            if ap.json.keys() >= {"feedUrl"}:
                ap_url = ap.json['feedUrl']
            else:
                qtw.QApplication.restoreOverrideCursor()
                self.invalid_url_warning()
                return
        else:
            ap_url = ap_selection['url']
            

        feed_req = requests.get(ap_url)
        feed = BeautifulSoup(feed_req.content, features='xml')
        feed_title = feed.find('title').text
        try:
            feed_image = feed.find('image').find('url').text
        except:
            feed_image = feed.find('image')['href']

        feed_description = feed.find('description').text
        feed_author = "by " + feed.find('author').text

        request=urllib.request.Request(feed_image, None, self.headers)
        response = urllib.request.urlopen(request)
        url_image = response.read()
        podcast_image = qtg.QPixmap()
        podcast_image.loadFromData(url_image)
        podcast_image_display.setPixmap(podcast_image)
        podcast_image_display.setScaledContents(True)
        podcast_image_display.setFixedSize(250, 250)
        podcast_image_display.move(0, 200)
        podcast_image_display.setAlignment(qtc.Qt.AlignCenter)
        
        podcast_title = qtw.QLabel(feed_title)
        podcast_title.setStyleSheet('font-weight:bold')
        text_width = podcast_title.fontMetrics().boundingRect(podcast_title.text()).width()
        if text_width > self.start_width_resize:
            podcast_title = QMarqueeLabel(feed_title)
            podcast_title.setDirection(qtc.Qt.RightToLeft)
        podcast_title.setFixedWidth(self.start_width_resize)
        podcast_title.move(0, 100)
        podcast_title.setAlignment(qtc.Qt.AlignCenter)
        description_words = feed_description.split()
        description = ""
        if len(description_words) > 90:
            for i in range(90):
                description += description_words[i] + " "
            description += "..."
        else:
            description = feed_description
        podcast_description = qtw.QLabel(description)
        podcast_description.setWordWrap(True)
        artist_names_lbl = qtw.QLabel(feed_author)
        artist_names_lbl.setWordWrap(True)
        artist_names_lbl.setStyleSheet('font-style:italic')
        subscribe_btn = qtw.QPushButton("Subscribe", clicked=lambda: self.add_podcast_to_library(ap_selection))
        subscribe_btn.setFixedWidth(300)
        podcast_description.setFixedHeight(270)
        podcast_description.setAlignment(qtc.Qt.AlignTop)
        
        about_layout.layout().addWidget(back_to_search)
        about_layout.layout().addWidget(podcast_image_display, alignment=qtc.Qt.AlignCenter)
        about_layout.layout().addWidget(subscribe_btn, alignment=qtc.Qt.AlignCenter)
        about_layout.layout().addWidget(podcast_title, alignment=qtc.Qt.AlignCenter)
        about_layout.layout().addWidget(artist_names_lbl)
        about_layout.layout().addWidget(podcast_description)

        self.setCentralWidget(about_layout)
        qtw.QApplication.restoreOverrideCursor()

    def get_total_track_time(self):
        '''
        Find the total length of the track.
        Display the length in the label to the right of the
        position_slider.
        '''
        self.total_track_length = self.player.get_length() / 1000
        length_gmtime = time.gmtime(self.total_track_length)
        if self.total_track_length >= 3600:
            self.ttl_string = time.strftime("%-H:%M:%S", length_gmtime)
            pixels_wide = self.fontMetrics().horizontalAdvance("-0:00:00")
        else:
            self.ttl_string = time.strftime("%M:%S", length_gmtime)
            pixels_wide = self.fontMetrics().horizontalAdvance("-00:00")
        self.position_total_time.setFixedWidth(pixels_wide)
        self.position_total_time.setText(self.ttl_string)

    def position_total_time_clicked(self):
        if self.ptt_to_prt:
            self.ptt_to_prt = False
            self.position_total_time.setText(self.ttl_string)
        else:
            self.ptt_to_prt = True

    def skip_back(self):
        if self.player and self.player.is_playing():
            rewind = self.player.get_time() - 10000
            if rewind < 0:
                rewind = 0
            self.player.set_time(rewind)

    def skip_forward(self):
        if self.player and self.player.is_playing():
            self.player.set_time(self.player.get_time() + 15000)

    def set_position(self, clicked_pos):
        '''
        Set the place in the audio track based on the slider.
        '''
        self.timer.stop()
        self.player.set_position(clicked_pos / 1000)
        self.timer.start()
    
    def set_playback_speed(self):
        if self.player:
            self.playback_speed_val += .25
            if self.playback_speed_val > 2:
                self.playback_speed_val = 1
            self.player.set_rate(self.playback_speed_val)
            self.playback_speed_btn.setText(f"{self.playback_speed_val}x")

    def to_play_view(self):
        self.build_play_view(self.current_episode.title)
        
    def show_track_time_elapsed(self):
        # Show track time elapsed
        self.track_time_elapsed = self.player.get_time() / 1000
        tte_gmtime = time.gmtime(self.track_time_elapsed)
        if self.total_track_length >= 3600:
            tte_string = time.strftime("%-H:%M:%S", tte_gmtime)
            if self.just_built_play_view:
                pixels_wide = self.fontMetrics().horizontalAdvance("0:00:00")
        else:
            tte_string = time.strftime("%M:%S", tte_gmtime)
            if self.just_built_play_view:
                pixels_wide = self.fontMetrics().horizontalAdvance("00:00")
        if self.just_built_play_view:
            self.position_elapsed_time.setFixedWidth(pixels_wide)
            self.just_built_play_view = False
        self.position_elapsed_time.setText(tte_string)

    def update_ui(self):
        '''
        Update the slider and other UI elements while the audio is playing.
        '''
        track_position = int(self.player.get_position() * 1000)
        self.position_slider.setValue(track_position)
        
        if self.play_view:
            self.show_track_time_elapsed()

            # If the user chose to display the remaining track time
            if self.ptt_to_prt:
                time_remaining = (self.total_track_length - self.track_time_elapsed) / self.playback_speed_val
                tr_gmtime = time.gmtime(int(time_remaining))
                if self.total_track_length >= 3600:
                    tte_string = time.strftime("-%-H:%M:%S", tr_gmtime)
                else:
                    tte_string = time.strftime("-%M:%S", tr_gmtime)
                self.position_total_time.setText(tte_string)

            # Every 5 seconds, update database to save place in podcast
            rounded_elapsed = int(round(self.track_time_elapsed, 0))
            if rounded_elapsed % 5 == 0:
                # Don't save the same timestamp twice
                if self.already_saved != rounded_elapsed:
                    self.current_episode.bookmark = self.player.get_time()
                    self.current_episode.save()
                    self.already_saved = rounded_elapsed

        # If no media is playing, stop the timer
        if not self.player.is_playing():
            # If player not playing and it's not paused the track is finished
            if not self.is_paused:
                if self.play_view:
                    self.ep_play.setText("►")
                    if self.total_track_length >= 3600:
                        tte_string = '0:00:00'
                    else:
                        tte_string = '00:00'
                    self.position_elapsed_time.setText(tte_string)
                    self.position_slider.setValue(0)
                
                self.player.set_position(0)
                self.player.stop()
                self.current_episode.bookmark = 0
                self.current_episode.save()
                self.try_next_episode()
    
    def try_next_episode(self):
        # Check if there is a newer episode
        ep_date_list = []
        query = EpisodeDB.select().where(EpisodeDB.podcast == self.current_podcast).order_by(EpisodeDB.pub_date.desc())
        if query.exists():
            for episode in query:
                ep_date_list.append(episode.pub_date)
            current_episode_id = ep_date_list.index(self.current_episode.pub_date)
            if current_episode_id != 0:
                # Get the next episode
                next_episode_id = current_episode_id - 1
                self.current_episode = EpisodeDB.select().where(EpisodeDB.pub_date == ep_date_list[next_episode_id]).get()
                self.track = self.current_episode.url
                self.player = vlc.MediaPlayer(self.track)
                # If we are in play view, update all labels.
                if self.play_view:
                    self.podcast_title.setText(self.current_podcast.title)
                    self.episode_title.setText(self.current_episode.title)
                    self.play_episode()
                else:
                    self.player.play()
                    while not self.player.is_playing():
                        time.sleep(0.5)
                    if self.current_episode.bookmark != 0:
                        self.player.set_time(self.current_episode.bookmark)
            else:
                self.timer.stop()
	
    def library_context_menu(self, position):
        if self.lib_podcasts.itemAt(position):
            contextMenu = qtw.QMenu(self)
            remove_action = contextMenu.addAction("Remove Podcast")
            action = contextMenu.exec_(qtg.QCursor.pos())
            if action == remove_action:
                self.remove_podcast(self.lib_podcasts.itemAt(position).text())
                
    def episode_context_menu(self, position):
        contextMenu = qtw.QMenu(self)
        play_action = contextMenu.addAction("Play")
        action = contextMenu.exec_(qtg.QCursor.pos())
        if action == play_action:
            self.build_play_view(self.ep_list.item(self.ep_list.currentRow(),1).text())
            
    def search_context_menu(self, position):
        contextMenu = qtw.QMenu(self)
        about_action = contextMenu.addAction("About")
        action = contextMenu.exec_(qtg.QCursor.pos())
        if action == about_action:
            self.build_about_view(self.results_lod[self.results_list.currentRow()])
    
    @staticmethod
    def get_episode_url(episode):
        links = episode["links"]
        for link in links:
            if "audio" in link["type"]:
                return link["href"]

    @staticmethod
    def icon_from_base64(base64):
        pixmap = qtg.QPixmap()
        pixmap.loadFromData(qtc.QByteArray.fromBase64(base64))
        icon = qtg.QIcon(pixmap)
        return icon

if __name__ == '__main__':
    qtw.QApplication.setAttribute(qtc.Qt.AA_EnableHighDpiScaling, True)
    app = qtw.QApplication(sys.argv)
    mw = MainWindow()
    sys.exit(app.exec())
